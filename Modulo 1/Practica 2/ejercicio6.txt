ORG 1000H
;Cada palabra ocupa 6 bytes por lo que se hace mas facil la ejecucion en subrutina
cero db "cero  "
uno db "uno   "
dos db "dos   "
tres db "tres  "
cuatro db "cuatro"
cinco db "cinco "
seis db "seis  "
siete db "siete "
ocho db "ocho  "
nueve db "nueve "

MSJ DB "INGRESE UN NUMERO:"
FIN DB ?
ORG 1500H ;Direcciones de E/S
NUM DB ?
ORG 3000H
MOSTRAR_LETRAS: MOV BX, SP ;Obtengo el parametro pasado
add BX, 2
MOV bx, [BX] ;Ya que hice push de la direccion de num
mov cx, [bx]

;GUARDO ESTADO DE AX
PUSH AX
PUSH DX

;Proceso el dato
mov bx, offset cero
mov ch, 30h
loop: cmp cl, ch
jz imp_let
add bx, 6 ;lo desplazo al proximo numero
inc ch
jmp loop
jmp FIN_SUB

imp_let: mov al, 6 ;Todas las palabras ocupan 6 bytes
int 7



FIN_SUB: POP DX 
POP AX
;Recupero estado de ambos registros usados
RET



ORG 2000H
mov dl, 0; en dl se almacenan cant 0
loop_principal: MOV BX, OFFSET MSJ
MOV AL, OFFSET FIN-OFFSET MSJ
INT 7
MOV BX, OFFSET NUM
INT 6
cmp NUM, 30H
jnz comparar
inc dl
comparar: cmp dl, 2
jz fin_principal
PUSH BX
call mostrar_letras
jmp loop_principal
fin_principal: INT 0
END